package bl.tools;

import java.io.*;
import java.util.*;

/**
 * Generates a List of test for execution of the instrumented Rhino version.
 * This list can be passed to jsDriver.pl. All tests would be too much and´
 * we would have not enough failing tests.
 * @author CO
 *
 */
public class Generator {
	
	/**
	 * Tests within this sub-directory won`t be sampled. They will
	 * all be put in the list file. This is the right place to 
	 * put the failing tests in - those we generated before.
	 */
	private static final String FAILING_TESTS = "failing";
	
	/**
	 * Directory where tests can be found.
	 */
	private static String location;
	
	/**
	 * @param args 1. location of the tests, 2. percent of tests to sample
	 */
	public static void main(String[] args){
		location = args[0];
		HashSet<String> dirs = parseDirs(location);
		HashSet<String> subDirs = parseSubDirs( dirs );
		HashSet<String> list = parseTests( subDirs, Integer.parseInt(args[1]) );
		list = addFailing( list );
		write(list);
	}
	
	/**
	 * Generates a set of all sub-directories of the passed location,
	 * that do not equal FAILING_TESTS.
	 * @param location directory to parse
	 * @return set of sub-directories of location, without FAILING_TESTS
	 */
	private static HashSet<String> parseDirs(String location){
		HashSet<String> dirs = new HashSet<String>( );
		String[] dirsTemp = new File(  location  ).list();
		for( int i = 0; i < dirsTemp.length; i++ ){
			if( !dirsTemp[i].equals(FAILING_TESTS) && (new File(location + "\\" + dirsTemp[i]).isDirectory()) )
				dirs.add(dirsTemp[i]);
		}
		return dirs;
	}
	
	/**
	 * 
	 * @param dirs a set of all directories within the specified location
	 * @return a set containing all sub-directories of directories within the specified location.
	 * Each item consists of the relative path, beginning at (but without) "location\".
	 */
	private static HashSet<String> parseSubDirs(HashSet<String> dirs){
		HashSet<String> subDirs = new HashSet<String>();
		for( Iterator<String> iter = dirs.iterator(); iter.hasNext(); ){
			String dir = iter.next();
			String[] currentSubDirs = new File( location + "\\" + dir ).list();
			for( int i = 0; i < currentSubDirs.length; i++ ){
				if( new File(location + "\\" + dir + "\\" + currentSubDirs[i]).isDirectory() )
					subDirs.add( dir + "/" + currentSubDirs[i] );
			}
		}
		return subDirs;
	}
	
	/**
	 * As we walked two levels down in the directory hierarchy, we finally reached the test`s home.
	 * Files ending with ".js" found here are assumed to be tests. We collect them with the specified
	 * likelihood (%).
	 * @param subDirs the set generated by parseSubDirs, percent likelihood for sampling
	 * @return the sampled tests
	 */
	private static HashSet<String> parseTests( HashSet<String> subDirs, int percent ){
		HashSet<String> list = new HashSet<String>();
		for( Iterator<String> iter = subDirs.iterator(); iter.hasNext(); ){
			String subDir = iter.next();
			String[] currentFiles = new File( location + "\\" + subDir ).list();
			for( int i = 0; i < currentFiles.length; i++ ){
				if( currentFiles[i].substring(currentFiles[i].length() -3, currentFiles[i].length()).equals(".js")
					&& ( percent == 100 || Math.random() * 100 < percent)
					&& ! currentFiles[i].matches(".*shell.*") )
					list.add(subDir + "/" + currentFiles[i]);
			}
		}
		return list;
	}
	
	/**
	 * The files in FAILING_TESTS, which are left out before, are added here to the passed argument.
	 * @param list
	 * @return all we need for a hopefully informative test run
	 */
	private static HashSet<String> addFailing( HashSet<String> list ){
		HashSet<String> failing = new HashSet<String>();
		// Is there a directory named like FAILING_TESTS
		if( !( (new File(location + "\\" + FAILING_TESTS).exists() ) ) )
			return failing;
		// Little cheat so we can use the other Helper methods
		failing.add(FAILING_TESTS);
		HashSet<String> subDirs = parseSubDirs(failing);
		HashSet<String> failingTests = parseTests(subDirs, 100);
		list.addAll(failingTests);
		return list;
	}
	
	/**
	 * Writes the generated set of tests to rhino`s test directory.
	 * The file is named "sampled-tests.ls"
	 * @param list
	 */
	private static void write(HashSet<String> list){
		File file = new File( location + "\\" + "sampled-tests.ls" );
		FileWriter fw = null;
		BufferedWriter bw = null;
		try{
			fw = new FileWriter( file );
		}catch(IOException e){
			System.out.println("IOException: " + e.getMessage());
			System.exit(1);
		}
		bw = new BufferedWriter(fw);
		String line;
		int i = 0;
		for( Iterator<String> iter = list.iterator(); iter.hasNext(); ){
			line = iter.next();
			i++;
			try{
				bw.write(line + "\n");
			}catch(IOException e){
				System.out.println("IOExcpetion: " + e.getMessage());
			}
		}
		System.out.println(i + " tests have been written to '" + location + "\\sampled-tests.ls'");
		try {
			bw.close();
		} catch (IOException e) {
			System.out.println("I/O Exception: " + e.getMessage());
			System.exit(1);
		}
	}

}
